// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/hello.proto

#include "proto/hello.pb.h"
#include "proto/hello.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hello {

static const char* Hello_method_names[] = {
  "/hello.Hello/Hello",
};

std::unique_ptr< Hello::Stub> Hello::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Hello::Stub> stub(new Hello::Stub(channel));
  return stub;
}

Hello::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Hello_(Hello_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Hello::Stub::Hello(::grpc::ClientContext* context, const ::hello::HelloInput& request, ::hello::HelloOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Hello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hello::HelloOutput>* Hello::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const ::hello::HelloInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hello::HelloOutput>::Create(channel_.get(), cq, rpcmethod_Hello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hello::HelloOutput>* Hello::Stub::PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::hello::HelloInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hello::HelloOutput>::Create(channel_.get(), cq, rpcmethod_Hello_, context, request, false);
}

Hello::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Hello_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Hello::Service, ::hello::HelloInput, ::hello::HelloOutput>(
          std::mem_fn(&Hello::Service::Hello), this)));
}

Hello::Service::~Service() {
}

::grpc::Status Hello::Service::Hello(::grpc::ServerContext* context, const ::hello::HelloInput* request, ::hello::HelloOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello

